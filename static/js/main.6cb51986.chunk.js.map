{"version":3,"sources":["molecules/ItemDetail.js","modules/Order.js","molecules/MenuItem.js","utilities/requests.js","modules/Menu.js","App.js","serviceWorker.js","index.js"],"names":["ItemDetail","foodItem","buttonAction","buttonText","className","item","style","margin","size","toUpperCase","parseFloat","price","toFixed","onClick","Order","currentOrder","updateCurrentOrder","total","items","length","map","orderItem","i","key","MenuItem","menuItem","options","option","foodItemDetail","getMenu","a","fetch","response","json","jsonResponse","menu","console","log","Menu","useState","setMenu","useEffect","fetchMenu","menuResponse","newItem","App","orderId","Date","now","setCurrentOrder","currentItems","updateMethod","currentTotal","concat","uid","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6cb51986.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function ItemDetail({ foodItem, buttonAction, buttonText }) {\n  return (\n    <div className=\"food-item\">\n        {foodItem.item && (\n          <h2 style= {{margin: \"auto 0\"}}>\n            {foodItem.item}: \n          </h2>\n        )}\n      Size: {foodItem.size.toUpperCase()}\n      <br />\n      Price: ${parseFloat(foodItem.price * 1.0).toFixed(2)}\n      <button onClick={() => buttonAction(foodItem)}>{buttonText}</button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport ItemDetail from \"../molecules/ItemDetail\";\n\nexport default function Order({ currentOrder, updateCurrentOrder }) {\n  const renderCurrentOrder = () => {\n    return currentOrder.items.length ? (\n      currentOrder.items.map((orderItem, i) => (\n        <ItemDetail\n          buttonAction={() => updateCurrentOrder(orderItem)}\n          buttonText=\"Remove\"\n          key={`order${orderItem.item}${i}`}\n          foodItem={orderItem}\n        />\n      ))\n    ) : (\n      <div className=\"center-floating-text\">\n        <strong>...There are no Items on this order yet</strong>\n      </div>\n    );\n  };\n  return (\n    <div className=\"order-page page-section\">\n      <h1>Order Total: ${(currentOrder.total * 1.0).toFixed(2)}</h1>\n      <hr />\n      <h4 className=\"page-item-area\">{renderCurrentOrder()}</h4>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport ItemDetail from \"../molecules/ItemDetail\";\nexport default function MenuItem({ menuItem, updateCurrentOrder }) {\n  const renderOptions = () => {\n    return menuItem.options.map((option, i) => (\n      <ItemDetail\n        buttonAction={(foodItemDetail) =>\n          updateCurrentOrder({ item: menuItem.item, ...foodItemDetail })\n        }\n        buttonText=\"Add To Order\"\n        foodItem={option}\n        key={`option${i}`}\n      />\n    ));\n  };\n  return (\n    <div className=\"menu-item\">\n      <h2>{menuItem.item}</h2>\n      <h4>{menuItem.options.length && renderOptions()}</h4>\n    </div>\n  );\n}\n","const menuUrl = \"https://cors-anywhere.herokuapp.com/https://mobile-dev-code-project.s3-us-west-2.amazonaws.com/project.json\";\nconst getMenu = async () => {\n\n  try {\n    let response = await fetch(menuUrl);\n    if (response) {\n      const jsonResponse = await response.json();\n      return jsonResponse.menu ;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport { getMenu };\n\n","import React, { useEffect, useState } from \"react\";\n\nimport MenuItem from \"../molecules/MenuItem\";\nimport { getMenu } from \"../utilities/requests\";\n\nexport default function Menu({ updateCurrentOrder }) {\n  const [menu, setMenu] = useState([]);\n  useEffect(() => {\n    fetchMenu();\n  }, []);\n\n  const fetchMenu = async () => {\n    const menuResponse = await getMenu();\n    setMenu(menuResponse);\n  };\n  const renderMenuItems = () => {\n    return menu.map((menuItem, i) => (\n      <MenuItem\n        key={`${menuItem.item}${i}`}\n        menuItem={menuItem}\n        updateCurrentOrder={(newItem) => updateCurrentOrder(newItem)}\n      />\n    ));\n  };\n\n  return (\n    <div className=\"menu-page page-section\">\n      <h1>Menu</h1>\n      <hr/> \n      <div className=\"page-item-area\">{menu && renderMenuItems()}</div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport Order from \"./modules/Order\";\nimport Menu from \"./modules/Menu\";\n\nfunction App() {\n  const [currentOrder, setCurrentOrder] = useState({ orderId: Date.now(), items: [], total: 0.0 });\n\n  const updateCurrentOrder = ({ orderItem, updateMethod }) => {\n    let currentItems;\n    let currentTotal = currentOrder.total;\n    switch (updateMethod) {\n      case \"add\":\n        currentItems = currentOrder.items.concat({\n          uid: Date.now(),\n          ...orderItem,\n        });\n        currentTotal += orderItem.price;\n        break;\n      case \"remove\":\n        currentItems = currentOrder.items.filter(\n          (item) => orderItem.uid !== item.uid\n        );\n        currentTotal -= orderItem.price;\n        break;\n      default:\n        break;\n    }\n    setCurrentOrder({ orderId: currentOrder.orderId, items: currentItems, total: currentTotal });\n    return;\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <em>\n          <h1>Order UP!</h1>\n        </em>\n      </div>\n      <Order\n        currentOrder={currentOrder}\n        updateCurrentOrder={(orderItem) =>\n          updateCurrentOrder({ orderItem, updateMethod: \"remove\" })\n        }\n      />\n      <Menu\n        updateCurrentOrder={(newItem) =>\n          updateCurrentOrder({\n            orderItem: newItem,\n            updateMethod: \"add\",\n          })\n        }\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}